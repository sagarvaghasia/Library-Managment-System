package com.project.Main.Models.ForgotPassword.Repositories;

import com.project.Main.Database.IDBConnection;
import com.project.Main.Database.State.DatabaseState;
import com.project.Main.Database.State.SQLFailureState;
import com.project.Main.Database.State.SuccessState;
import com.project.Main.Models.ForgotPassword.IForgotPassword;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.*;

public class ForgotPasswordRepository implements IForgotPasswordRepository {

    public final Logger LOGGER = LogManager.getLogger(this.getClass());
    private final IDBConnection dbConn;

    public ForgotPasswordRepository(IDBConnection database) {
        this.dbConn = database;
    }

    @Override
    public DatabaseState addForgotRequest(IForgotPassword forgotPassword) {

        try {
            String query = "insert into forgot_password (user_id, token) values (?, ?)";
            Connection connection = this.dbConn.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, forgotPassword.getUserId());
            preparedStatement.setLong(2, forgotPassword.getTimestamp());

            int numberOfRowsAffected = preparedStatement.executeUpdate();
            int autoGeneratedId = -1;

            if (numberOfRowsAffected > 0) {
                ResultSet resultSet = preparedStatement.getGeneratedKeys();
                resultSet.next();
                autoGeneratedId = resultSet.getInt(1);
            }

            forgotPassword.setId(autoGeneratedId);

            return new SuccessState();
        } catch (SQLException e) {
            LOGGER.error("Database exception " + e.toString());

            return new SQLFailureState();
        }

    }

    @Override
    public boolean validateToken(long token, int userId) {

        try {
            Connection connection = this.dbConn.getConnection();
            String query = "select * from forgot_password where user_id = ? and token = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, userId);
            preparedStatement.setLong(2, token);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                return true;
            }

            return false;
        } catch (SQLException e) {
            LOGGER.error("Database exception " + e.toString());
            return false;
        }

    }
}
